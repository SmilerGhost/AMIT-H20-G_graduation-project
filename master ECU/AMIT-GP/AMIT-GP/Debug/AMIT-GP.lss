
AMIT-GP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008cb  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000709  00000000  00000000  00000b73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000452  00000000  00000000  0000127c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003c1  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000225  00000000  00000000  00001bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include "SPI.h"
#include "USART_RS232_H_file.h"
int main(void)
{
	USART_Init(9600);
  6c:	60 e8       	ldi	r22, 0x80	; 128
  6e:	75 e2       	ldi	r23, 0x25	; 37
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <USART_Init>
	SPI_InitMaster();
  78:	0e 94 43 00 	call	0x86	; 0x86 <SPI_InitMaster>
	Uint8t ORDER = 0;
	while (1)
	{
		ORDER = USART_RxChar();
  7c:	0e 94 7c 00 	call	0xf8	; 0xf8 <USART_RxChar>
		SPI_SendByte(ORDER);
  80:	0e 94 4a 00 	call	0x94	; 0x94 <SPI_SendByte>
  84:	fb cf       	rjmp	.-10     	; 0x7c <main+0x10>

00000086 <SPI_InitMaster>:
}

void SPI_InitSlave()
{
	DDRB |= (1<<PB6);
	SPCR |= (1<<SPE);
  86:	87 b3       	in	r24, 0x17	; 23
  88:	80 6b       	ori	r24, 0xB0	; 176
  8a:	87 bb       	out	0x17, r24	; 23
  8c:	8d b1       	in	r24, 0x0d	; 13
  8e:	80 65       	ori	r24, 0x50	; 80
  90:	8d b9       	out	0x0d, r24	; 13
  92:	08 95       	ret

00000094 <SPI_SendByte>:
}

void SPI_SendByte(Uint8t data)
{
	SPDR = data;
  94:	8f b9       	out	0x0f, r24	; 15
	while(Bit_Is_Clear(SPSR,SPIF));
  96:	77 9b       	sbis	0x0e, 7	; 14
  98:	fe cf       	rjmp	.-4      	; 0x96 <SPI_SendByte+0x2>
}
  9a:	08 95       	ret

0000009c <USART_Init>:

#include "USART_RS232_H_file.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{ 
	UCSRB |= (1 << RXEN) | (1 << TXEN);				/* Enable USART transmitter and receiver */
  9c:	2a b1       	in	r18, 0x0a	; 10
  9e:	28 61       	ori	r18, 0x18	; 24
  a0:	2a b9       	out	0x0a, r18	; 10
	UCSRC |= (1 << URSEL)| (1 << UCSZ0) | (1 << UCSZ1);	/* Write USCRC for 8 bit data and 1 stop bit */ 
  a2:	20 b5       	in	r18, 0x20	; 32
  a4:	26 68       	ori	r18, 0x86	; 134
  a6:	20 bd       	out	0x20, r18	; 32
	UBRRL = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
  a8:	dc 01       	movw	r26, r24
  aa:	cb 01       	movw	r24, r22
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	aa 1f       	adc	r26, r26
  b2:	bb 1f       	adc	r27, r27
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	aa 1f       	adc	r26, r26
  ba:	bb 1f       	adc	r27, r27
  bc:	9c 01       	movw	r18, r24
  be:	ad 01       	movw	r20, r26
  c0:	22 0f       	add	r18, r18
  c2:	33 1f       	adc	r19, r19
  c4:	44 1f       	adc	r20, r20
  c6:	55 1f       	adc	r21, r21
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	44 1f       	adc	r20, r20
  ce:	55 1f       	adc	r21, r21
  d0:	60 e0       	ldi	r22, 0x00	; 0
  d2:	74 e2       	ldi	r23, 0x24	; 36
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 80 00 	call	0x100	; 0x100 <__udivmodsi4>
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	82 0f       	add	r24, r18
  e0:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
  e2:	da 01       	movw	r26, r20
  e4:	c9 01       	movw	r24, r18
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	a1 09       	sbc	r26, r1
  ea:	b1 09       	sbc	r27, r1
  ec:	89 2f       	mov	r24, r25
  ee:	9a 2f       	mov	r25, r26
  f0:	ab 2f       	mov	r26, r27
  f2:	bb 27       	eor	r27, r27
  f4:	80 bd       	out	0x20, r24	; 32
  f6:	08 95       	ret

000000f8 <USART_RxChar>:
}

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSRA & (1 << RXC)));					/* Wait until new data receive */
  f8:	5f 9b       	sbis	0x0b, 7	; 11
  fa:	fe cf       	rjmp	.-4      	; 0xf8 <USART_RxChar>
	return(UDR);									/* Get and return received data */ 
  fc:	8c b1       	in	r24, 0x0c	; 12
}
  fe:	08 95       	ret

00000100 <__udivmodsi4>:
 100:	a1 e2       	ldi	r26, 0x21	; 33
 102:	1a 2e       	mov	r1, r26
 104:	aa 1b       	sub	r26, r26
 106:	bb 1b       	sub	r27, r27
 108:	fd 01       	movw	r30, r26
 10a:	0d c0       	rjmp	.+26     	; 0x126 <__udivmodsi4_ep>

0000010c <__udivmodsi4_loop>:
 10c:	aa 1f       	adc	r26, r26
 10e:	bb 1f       	adc	r27, r27
 110:	ee 1f       	adc	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	a2 17       	cp	r26, r18
 116:	b3 07       	cpc	r27, r19
 118:	e4 07       	cpc	r30, r20
 11a:	f5 07       	cpc	r31, r21
 11c:	20 f0       	brcs	.+8      	; 0x126 <__udivmodsi4_ep>
 11e:	a2 1b       	sub	r26, r18
 120:	b3 0b       	sbc	r27, r19
 122:	e4 0b       	sbc	r30, r20
 124:	f5 0b       	sbc	r31, r21

00000126 <__udivmodsi4_ep>:
 126:	66 1f       	adc	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	88 1f       	adc	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	1a 94       	dec	r1
 130:	69 f7       	brne	.-38     	; 0x10c <__udivmodsi4_loop>
 132:	60 95       	com	r22
 134:	70 95       	com	r23
 136:	80 95       	com	r24
 138:	90 95       	com	r25
 13a:	9b 01       	movw	r18, r22
 13c:	ac 01       	movw	r20, r24
 13e:	bd 01       	movw	r22, r26
 140:	cf 01       	movw	r24, r30
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
